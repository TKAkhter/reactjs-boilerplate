// This file is auto-generated by @hey-api/openapi-ts

import {
  type Options as ClientOptions,
  type TDataShape,
  type Client,
  formDataBodySerializer,
} from "@hey-api/client-fetch";
import type {
  GetHealthData,
  GetHealthResponse,
  GetHealthClearCacheData,
  GetHealthClearCacheResponse,
  GetHealthClearLogsData,
  GetHealthClearLogsResponse,
  PostAuthLoginData,
  PostAuthLoginResponse,
  PostAuthRegisterData,
  PostAuthRegisterResponse,
  PostAuthExtendTokenData,
  PostAuthExtendTokenResponse,
  GetAuthLogoutData,
  GetAuthLogoutResponse,
  PostAuthForgotPasswordData,
  PostAuthForgotPasswordResponse,
  PostAuthResetPasswordData,
  PostAuthResetPasswordResponse,
  GetUserData,
  GetUserResponse,
  PostUserData,
  PostUserResponse,
  PostUserImportData,
  PostUserImportResponse,
  GetUserExportData,
  GetUserExportResponse,
  DeleteUserByIdData,
  DeleteUserByIdResponse,
  GetUserByIdData,
  GetUserByIdResponse,
  PutUserByIdData,
  PutUserByIdResponse,
  GetUserEmailByEmailData,
  GetUserEmailByEmailResponse,
  PostUserFindData,
  PostUserFindResponse,
  DeleteUserBulkData,
  DeleteUserBulkResponse,
  GetFileData,
  GetFileResponse,
  DeleteFileByIdData,
  DeleteFileByIdResponse,
  GetFileByIdData,
  GetFileByIdResponse,
  PutFileByIdData,
  PutFileByIdResponse,
  GetFileUserByUserIdData,
  GetFileUserByUserIdResponse,
  PostFileFindData,
  PostFileFindResponse,
  PostFileUploadData,
  PostFileUploadResponse,
} from "./types.gen";
import { client as _heyApiClient } from "./client.gen";

export type Options<
  TData extends TDataShape = TDataShape,
  ThrowOnError extends boolean = boolean,
> = ClientOptions<TData, ThrowOnError> & {
  /**
   * You can provide a client instance returned by `createClient()` instead of
   * individual options. This might be also useful if you want to implement a
   * custom client.
   */
  client?: Client;
  /**
   * You can pass arbitrary values through the `meta` object. This can be
   * used to access values that aren't defined as part of the SDK function.
   */
  meta?: Record<string, unknown>;
};

/**
 * Get health check
 */
export const getHealth = <ThrowOnError extends boolean = false>(
  options?: Options<GetHealthData, ThrowOnError>,
) => {
  return (options?.client ?? _heyApiClient).get<GetHealthResponse, unknown, ThrowOnError>({
    url: "/health",
    ...options,
  });
};

/**
 * Clear cache
 */
export const getHealthClearCache = <ThrowOnError extends boolean = false>(
  options?: Options<GetHealthClearCacheData, ThrowOnError>,
) => {
  return (options?.client ?? _heyApiClient).get<GetHealthClearCacheResponse, unknown, ThrowOnError>(
    {
      url: "/health/clear-cache",
      ...options,
    },
  );
};

/**
 * Clear log files
 */
export const getHealthClearLogs = <ThrowOnError extends boolean = false>(
  options?: Options<GetHealthClearLogsData, ThrowOnError>,
) => {
  return (options?.client ?? _heyApiClient).get<GetHealthClearLogsResponse, unknown, ThrowOnError>({
    url: "/health/clear-logs",
    ...options,
  });
};

/**
 * Login
 */
export const postAuthLogin = <ThrowOnError extends boolean = false>(
  options?: Options<PostAuthLoginData, ThrowOnError>,
) => {
  return (options?.client ?? _heyApiClient).post<PostAuthLoginResponse, unknown, ThrowOnError>({
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/auth/login",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options?.headers,
    },
  });
};

/**
 * Register
 */
export const postAuthRegister = <ThrowOnError extends boolean = false>(
  options?: Options<PostAuthRegisterData, ThrowOnError>,
) => {
  return (options?.client ?? _heyApiClient).post<PostAuthRegisterResponse, unknown, ThrowOnError>({
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/auth/register",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options?.headers,
    },
  });
};

/**
 * Extend Token
 */
export const postAuthExtendToken = <ThrowOnError extends boolean = false>(
  options?: Options<PostAuthExtendTokenData, ThrowOnError>,
) => {
  return (options?.client ?? _heyApiClient).post<
    PostAuthExtendTokenResponse,
    unknown,
    ThrowOnError
  >({
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/auth/extend-token",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options?.headers,
    },
  });
};

/**
 * Logout
 */
export const getAuthLogout = <ThrowOnError extends boolean = false>(
  options?: Options<GetAuthLogoutData, ThrowOnError>,
) => {
  return (options?.client ?? _heyApiClient).get<GetAuthLogoutResponse, unknown, ThrowOnError>({
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/auth/logout",
    ...options,
  });
};

/**
 * Forgot Password
 */
export const postAuthForgotPassword = <ThrowOnError extends boolean = false>(
  options?: Options<PostAuthForgotPasswordData, ThrowOnError>,
) => {
  return (options?.client ?? _heyApiClient).post<
    PostAuthForgotPasswordResponse,
    unknown,
    ThrowOnError
  >({
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/auth/forgot-password",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options?.headers,
    },
  });
};

/**
 * Reset Password
 */
export const postAuthResetPassword = <ThrowOnError extends boolean = false>(
  options?: Options<PostAuthResetPasswordData, ThrowOnError>,
) => {
  return (options?.client ?? _heyApiClient).post<
    PostAuthResetPasswordResponse,
    unknown,
    ThrowOnError
  >({
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/auth/reset-password",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options?.headers,
    },
  });
};

/**
 * Get all User
 */
export const getUser = <ThrowOnError extends boolean = false>(
  options?: Options<GetUserData, ThrowOnError>,
) => {
  return (options?.client ?? _heyApiClient).get<GetUserResponse, unknown, ThrowOnError>({
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/user",
    ...options,
  });
};

/**
 * Create User
 */
export const postUser = <ThrowOnError extends boolean = false>(
  options?: Options<PostUserData, ThrowOnError>,
) => {
  return (options?.client ?? _heyApiClient).post<PostUserResponse, unknown, ThrowOnError>({
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/user",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options?.headers,
    },
  });
};

/**
 * Import User
 */
export const postUserImport = <ThrowOnError extends boolean = false>(
  options?: Options<PostUserImportData, ThrowOnError>,
) => {
  return (options?.client ?? _heyApiClient).post<PostUserImportResponse, unknown, ThrowOnError>({
    ...formDataBodySerializer,
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/user/import",
    ...options,
    headers: {
      "Content-Type": null,
      ...options?.headers,
    },
  });
};

/**
 * Export User
 */
export const getUserExport = <ThrowOnError extends boolean = false>(
  options?: Options<GetUserExportData, ThrowOnError>,
) => {
  return (options?.client ?? _heyApiClient).get<GetUserExportResponse, unknown, ThrowOnError>({
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/user/export",
    ...options,
  });
};

/**
 * Delete User
 */
export const deleteUserById = <ThrowOnError extends boolean = false>(
  options: Options<DeleteUserByIdData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).delete<DeleteUserByIdResponse, unknown, ThrowOnError>({
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/user/{id}",
    ...options,
  });
};

/**
 * Get User by id
 */
export const getUserById = <ThrowOnError extends boolean = false>(
  options: Options<GetUserByIdData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).get<GetUserByIdResponse, unknown, ThrowOnError>({
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/user/{id}",
    ...options,
  });
};

/**
 * Update User
 */
export const putUserById = <ThrowOnError extends boolean = false>(
  options: Options<PutUserByIdData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).put<PutUserByIdResponse, unknown, ThrowOnError>({
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/user/{id}",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options?.headers,
    },
  });
};

/**
 * Get User by email
 */
export const getUserEmailByEmail = <ThrowOnError extends boolean = false>(
  options: Options<GetUserEmailByEmailData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).get<GetUserEmailByEmailResponse, unknown, ThrowOnError>({
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/user/email/{email}",
    ...options,
  });
};

/**
 * Find User by query
 */
export const postUserFind = <ThrowOnError extends boolean = false>(
  options?: Options<PostUserFindData, ThrowOnError>,
) => {
  return (options?.client ?? _heyApiClient).post<PostUserFindResponse, unknown, ThrowOnError>({
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/user/find",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options?.headers,
    },
  });
};

/**
 * Delete User in bulk
 */
export const deleteUserBulk = <ThrowOnError extends boolean = false>(
  options?: Options<DeleteUserBulkData, ThrowOnError>,
) => {
  return (options?.client ?? _heyApiClient).delete<DeleteUserBulkResponse, unknown, ThrowOnError>({
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/user/bulk",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options?.headers,
    },
  });
};

/**
 * Get all File
 */
export const getFile = <ThrowOnError extends boolean = false>(
  options?: Options<GetFileData, ThrowOnError>,
) => {
  return (options?.client ?? _heyApiClient).get<GetFileResponse, unknown, ThrowOnError>({
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/file",
    ...options,
  });
};

/**
 * Delete File
 */
export const deleteFileById = <ThrowOnError extends boolean = false>(
  options: Options<DeleteFileByIdData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).delete<DeleteFileByIdResponse, unknown, ThrowOnError>({
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/file/{id}",
    ...options,
  });
};

/**
 * Get File by id
 */
export const getFileById = <ThrowOnError extends boolean = false>(
  options: Options<GetFileByIdData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).get<GetFileByIdResponse, unknown, ThrowOnError>({
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/file/{id}",
    ...options,
  });
};

export const putFileById = <ThrowOnError extends boolean = false>(
  options: Options<PutFileByIdData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).put<PutFileByIdResponse, unknown, ThrowOnError>({
    ...formDataBodySerializer,
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/file/{id}",
    ...options,
    headers: {
      "Content-Type": null,
      ...options?.headers,
    },
  });
};

/**
 * Get File by userId
 */
export const getFileUserByUserId = <ThrowOnError extends boolean = false>(
  options: Options<GetFileUserByUserIdData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).get<GetFileUserByUserIdResponse, unknown, ThrowOnError>({
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/file/user/{userId}",
    ...options,
  });
};

/**
 * Find File by query
 */
export const postFileFind = <ThrowOnError extends boolean = false>(
  options?: Options<PostFileFindData, ThrowOnError>,
) => {
  return (options?.client ?? _heyApiClient).post<PostFileFindResponse, unknown, ThrowOnError>({
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/file/find",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options?.headers,
    },
  });
};

/**
 * Upload File
 */
export const postFileUpload = <ThrowOnError extends boolean = false>(
  options?: Options<PostFileUploadData, ThrowOnError>,
) => {
  return (options?.client ?? _heyApiClient).post<PostFileUploadResponse, unknown, ThrowOnError>({
    ...formDataBodySerializer,
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/file/upload",
    ...options,
    headers: {
      "Content-Type": null,
      ...options?.headers,
    },
  });
};
